-자바스크립트

-실행환경은 브라우저( 크롬..)
-node.js 라이브러리는 js로 서버단의 개발을 할 수 있도록하며 실행환경을 브라우저 밖으로 바꿈
-주요객체, 제일 많이 사용하는 것 - > document
ㄴgetElementById(id 값으로 요소를 가져옴
ㄴ실행결과 <시작태그> 내용</종료태그> 와 같은 하나의 요소를 가져옴
-js로 사이트를 동적으로 보이가흔 ㄴ예시 ->속성, 스타일, 내용(innerHTML)
-동적으로 사이트가 변화되게 사용자가 이벤트를 발생시킴 ->이벤트: click, drag drop, change, resize..
-태그 요소의 이벤트 속성: onXXXX의 값은자바스크립트 코드 1개 또는 함수
-js의 상수: const, 변수: let(참고 - var은 지역변수의 개념이 불명확)
-제어문: if, switch, for는 자바와 동일하게 사용
-함수정의(선언) 키워드:function, 리턴값은 return키워드



-함수보다 위에 있는 열에서 아직 정의되어 있지 않은 함수는 호출할 수 없음
단, function 함수이름() {}로 정의된 함수는 함수 끌어올리기라는 걸 함 (hoistiong) -> 위에서도 사용가능
문법적인 규칙은 2(함수를 변수에 대입),3(화살표함수)번이 맞긴함.. 각각의 사용 필요가 있음

-문자열 ''와 " "동일
따옴표 종류가 다르면 같이 쓸 수 있으나 같다면 |' 처럼 역슬래시를 붙여줘야함
; 생략가능

자바 스크립트의 배열
-자바와의 차이점은 배열의 크기가 동적입니다.- 자바의 리스트와 JS의 배열이 비슷하다
-인덱스0부터 시작, 배열 요소 접근은 배열이름[인덱스]
-주요특징: 메소드가 많음, push()-입력,pop() -제거 ...
  
-pre
<pre style="font-size: 1rem; font-family: inherit;">  
pre 태그는 코드 출력할 때, 보이는 그대로 출력
엔터를 줄바꿈 할 목적으로 사용, 스타일이 바뀜... body와 같도록 하려면 style 설정 필요 /inherit:부모스타일 상속

-document.write 또는 writeln 메소드 -> 웹문서에 문자열 출력(println과 유사)
 document.write('<hr>')  '<태그>' 가능
       document.writeln('<hr style ="border:0.2px dashed gray">') 스타일 지정도 가능
        
-배열 선언 : const names = [];  -> 내용이 없는 배열 선언
       // names = ['a','b'] //-> 오류..  -> 배열자체를 바꿀 수 없음

-배열 값 삽입
names.push('사나') //const 배열이 배열 요소 변경은 할 수 있음, 하나씩만 입력 가능
names.push(100)  //동일한 배열에 문자열과 number 저장가능
document.write('<h3>names 배열요소</h3>')
document.writeln("names= ",names) //ln은 엔터. 엔터는 html에서는 줄바꿈 안함

-pop
names.pop()  //마지막 인덱스 요소를 제거

-splice: 배열 요소의 삭제 - 위치와 개수 지정
names.splice(3,1) //위치 3, 개수 1
names.splice(3,2) //위치 3, 개수 2



-배열의 크기
document.writeln("names 크기 = ",names.length) 

-요소값 찾기
모모의 위치 찾기
document.writeln(names.indexOf('모모'))
배열에 모모가 있는지
document.writeln('names.includes(\'모모\')=',names.includes('모모'))


-foreach
foreach 메소드가 더 많이 쓰임 - 메소드의 인자가 함수->콜백 함수 ***중요
names 배열 요소를 순서대로 하나씩 콜백함수 실행시킴
인자 순서 정해져있음: item,index,array
변수명은 상관x
필요없다면 선언안해도 됨

names.forEach(function(item,index,array){  
            document.writeln("item=", item)
            document.writeln("index=", index)
            document.writeln("array=", array)
})

화살표함수로 변경1
names.forEach((item) => { 
            document.writeln("item=", item)
})

화살표함수로 변경2    
화살 함수를 변수로 선언. 함수 실행코드가 1줄일 경우 {} 생략
const printItem = (Item) => document.write("Item: ",Item)
names.forEach(printItem)


item을 매개변수로 삼음.. 





각자 조사하기
자바스크립트 for에 추가된 형식
for(... in 배열): 배열의 속성을 반복자가 순회
**for( ....of 배열 또는 컬렉션): 배열 요소를 반복자가 순회
배열과 컬렉션 각각 실행 결과 다름 - 현재 예제에서는 인덱스 값 속성만 나옴


자바스크립트에는 템플릿 리터럴(멀티라인, 표현식) 기능 존재 ``(백틱) 기호 사용
``은 ${} 을 사용하기 위한 기호 
변수 또는 수식 표현식을 ${} 기호에 표시
document.writeln(`[${item}]`) 
document.writeln('['+item+']')

ul>li 하면 자동으로 만들어짐
<ul>
        <li></li>
</ul>










-getElementById는 요소를 1개만 가져옴 - 
-getElementByXXX 중에 요소를 여러개 가져오는 메소드 - 1)태그이름 2)클래스이름
        const lis = document.getElementsByTagName('li')
        console.log(lis)

-주의할 점 : lis는 <li>요소의 집합. 배열이 아닌 collection임
 *** foreach 를 실행하려면 배열로 변환해야함

-배열로 바꾸는 메소드
const liArr = Array.from(lis) 
-item은 li 요소

        liArr.forEach((item)=> {
            if(item.innerHTML=='모모') item.style.color='red'
            document.writeln(`li 요소 내용=${item.innerHTML}`)
     })


, + 등 연결 기호 다양하게 사용 가능


----
싱글 페이지 애플리케이션
(single-page application, SPA, 스파): 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 작성함으로써 사용자와 소통하는 웹 애플리케이션이나 웹사이트

하나의 html안에서 내용이나 style을 바꾸는 것.. <-트렌드


-tr - table row
td,th - 칸..


DOM(Document Object Model)
https://www.w3schools.com/js/js_htmldom.asp




    // DOM: 문서객체모델. 웹문서는 태그로 구성됨, 그 태그들은 서로 부모-자식관계가 있음. 이것은 트리구조로 설명될 수 있음

<!-- 요소만 나오면 text가 빠짐.. 그냥 자식에는 ul(\n)으로 인해 text가 들어감 -->
console.log('1.childNodes')
console.log(kpop.childNodes)
console.log('2.children')
console.log(kpop.children)
console.log('3.첫번째 자식')
console.log(kpop.firstChild)
console.log('4.첫번째 자식요소')
console.log(kpop.firstElementChild)
console.log('5.마지막 자식')
console.log(kpop.lastChild)
console.log('6.마지막자식요소')
console.log(kpop.lastElementChild)
const child1 = kpop.lastElementChild
console.log('7.마지막 자식요소의 컨텐츠')
console.log(child1.innerHTML)
console.log(kpop.lastElementChild.innerHTML)
console.log('8.첫번째 자식요소의 컨텐츠')
console.log(kpop.firstElementChild.innerHTML)
console.log('9.첫번째 자식의 형제 요소')
console.log(kpop.firstElementChild.nextElementSibling)
console.log(kpop.firstElementChild.nextElementSibling.innerHTML)
console.log('10.마지막 자식의 형제 요소')
console.log(kpop.lastElementChild.nextElementSibling)  //다음형제
console.log(kpop.lastElementChild.previousElementSibling)  //앞에 나온 형제


    // getElementById 대신 css에서 사용했던 선택자로 요소 가져오기 
    //-> querySelector 한개만 가져오는 메소드/ querySelectorAll은 여러개 가져오는 메소드
       const trOne= document.querySelector('tr')
        console.log(trOne)
        const trMany= document.querySelectorAll('tr')
        console.log(trMany)
        const tdOne = document.querySelector('#eunha')
        console.log(tdOne)
        const tdMany = document.querySelectorAll('.viviz')
        console.log(tdMany)




        // 자식 요소를 가져오는 선택자
        const tr1 = document.querySelector('tr:first-child')	//선택자로 요소 가져오기
        console.log('tr1:',tr1)
        // ***첫번째 tr에 새로운 td 태그 요소 만들어 추가하기****
        const newtd = document.createElement("td")	
        // createElement("태그이름") : 지정된 이름의 태그 요소 만들기 => <td></td>
        newtd.innerHTML='테스트1'
        tr1.appendChild(newtd)		//tr1 변수로 지정된 요소의 마지막 자식 요소로 추가하기









--------------
스타일 제일 좋은건 css에
<head></head> 사이에 <style>로 적을 것이 아니라면 ( 몸체에 직접 넣으려면 
<body style=""></body>로 해야함

