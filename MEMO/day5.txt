-for문대신 forEach


- DOM: 문서객체모델. 웹문서는 태그로 구성됨, 그 태그들은 서로 부모-자식관계가 있음. 이것은 트리구조로 설명될 수 있음
1. div id ='kpop' 인 태그의 자식 요소들을 접근하는 '속성'들  -> 예제를 많이 다뤄봐야 이해가 됨

console.log('1.childNodes')
console.log(kpop.childNodes)
console.log('2.children')
console.log(kpop.children)
console.log('3.첫번째 자식')
console.log(kpop.firstChild)
console.log('4.첫번째 자식요소')
console.log(kpop.firstElementChild)
console.log('5.마지막 자식')
console.log(kpop.lastChild)
console.log('6.마지막자식요소')
const child1 = kpop.lastElementChild
console.log('7.마지막 자식요소의 컨텐츠')
console.log(child1.innerHTML)
console.log(kpop.lastElementChild.innerHTML)
console.log('8.첫번째 자식요소의 컨텐츠')
console.log(kpop.firstElementChild.innerHTML)
console.log('9.첫번째 자식의 형제 요소')
console.log(kpop.firstElementChild.nextElementSibling)
console.log(kpop.firstElementChild.nextElementSibling.innerHTML)
console.log('10.마지막 자식의 형제 요소')
console.log(kpop.lastElementChild.nextElementSibling)  //다음형제
console.log(kpop.lastElementChild.previousElementSibling)  //앞에 나온 형제

2. dom 메소드: html 요소를 가져오는 '매소드'
    // 1) getElementById 대신 css에서 사용했던 선택자로 요소 가져오기 
    //-> 2) querySelector 한개만 가져오는 메소드/ 3)querySelectorAll은 여러개 가져오는 메소드
    //4) 요소를 만들어주는 메소드: createElement
    //5) 요소를 추가해주는메소드 : appendChild
    //6) 요소를 여러개 가져오는 메소드:getElementsByTagName, getElementsByClassName


return 타입
        const twice1 = document.getElementsByTagName('tr') -> HTMLCollection   ->forEach문 불가능  

        const twice2 = document.querySelectorAll('tr')
        const twice3 = document.querySelectorAll('.twice') ->NodeList
        const twice4 = document.getElementsByClassName('.twice') // 2,3 ->NodeList  ->forEach문 가능  

forEach문은 List [] 만 가능 - 활용도는 query 가 더 좋음
get-> collection
query-> List

innerHTML 속성 X, value O
 value->input, select...



-submit->form 태그
required나 email 타입 체크는 태그에 설정한 것으로 submit되기 전에 동작, onsubmit 함수 실행 전에 동작
<input type="text" name="name" id="" placeholder="이름을 입력하세요" required>
-required : 필수 입력
-input type="email" -> text 타입과 같음..  + @를 확인하는 기능 포함

-    <!-- 가상요소 선택자: ::marker, ::before, ::after -->
-    /* 체크박스 중에 체크된 것(상태) - 상태요소 선택은 기호 -> :  /+ 기호는 바로 다음에 나오는 인접 형제 1개  */
        input[type=checkbox]:checked+label{  }


-          <fieldset>
                <legend>취미를 선택하세요</legend>
                <input type="checkbox" name="hobby" id="swimming" value="수영">
                <label for = "swimming">수영</label>
                <input type="checkbox" name="hobby" id="ski" value="스키">
                <label for = "ski">스키</label>
                <input type="checkbox" name="hobby" id="football" value="축구">
                <label for = "football">축구</label>
                <input type="checkbox" name="hobby" id="baseball" value="야구">
                <label for = "baseball">야구</label>
                <input type="checkbox" name="hobby" id="running" value="달리기">
                <label for = "running">달리기</label>
            </fieldset>  ->

--
함수 밖에서 값을 선언하면 화면이 만들어지는 순간 만들어지기에 값이 없는 상태로 저장됨-> 값을 담고 싶으면 함수 안에 선언해야함

   function save(){
            //버튼이 클릭되면 실행
            //해당 자리에서 변수 선언이 되어야 요소를 가져옴
            const name = document.querySelector('input[name="name"]')
            const age = document.querySelector('input[name="age"]')
            const temp = document.querySelectorAll('input[type="checkbox"]')
            const hobbies = document.querySelectorAll('input[type="checkbox"]:checked')
            console.log(name.value)
            console.log(age.value)
            temp.forEach((ele,i)=> console.log('checkbox',i,'=',ele.value))
            hobbies.forEach((ele,i)=> console.log('checkbox.cheked',i,'=',ele.value))
            //console.log(temp)
            //console.log(hobbies)
            // 사용자 양식에는 필수 입력 항목이 있음. ->이름 ,나이 .. (유효성 검사)
            //입력값에 대한 검사를 함 -> 함수 안에 넣어서..
            if(name.value ==''){
                alert('이름을 입력하세요')
                name.focus() //해당 칸으로 포커스가 감
                return; //함수 종료
            }
            if(age.value ==''){
                alert('나이를 입력하세요')
                age.focus()
                return; //함수 종료
            }
            let hobbStr =''
            const hobbArr = []
            hobbies.forEach(ele=>{
                //console.log(ele.value)
                hobbArr.push(ele.value)
                console.log(hobbArr)
            })
            hobbStr=hobbArr.join(',') //기호 , 로 배열값들 연결하기(join 메소드는 문자열 리턴)

            //alert(`${name.value}님(${age.value})이 선택한 취미는 ${hobbStr}입니다`)
            alert(`${name.value}님(${age.value})이 선택한 취미는 ${hobbArr.join(',')}입니다`)
            alert('입력데이터 저장완료')
        }


-------------------
-빈공간 조건식
if (name.value == '') 


action 속성값: 입력값을 받을 서버의 url

18번
1. form: 입력데이터 서버로 전송하기- onsubmit 활용(버튼은 submit동작)
    <!-- 17번 파일에서 form 태그 사용이 추가됨 -> 버튼의 동작이 submit이 됨 -->
    <!-- action 속성값: 입력값을 받을 서버의 url -->
    <!-- onsubmit 속성: submit 이벤트 발생시 실행할 js 코드(혹은 함수) 
                        함수 return이 false이면 action으로 넘어가지 않음 ->false로 만들어서 넘어가지 못하도록 만들기 가능-->
--

19번
2. form: 입력데이터 서버로 전송하기2 - 자바스크립트에서 submit()메소드 활용 (버튼은 일반 button 동작)
<!-- button의 타입을 button으로 해서 동작시킬수도 있음 -->
    <form action="../day3_form/success.html">
<button type="button" onclick="save()">저장하기</button>


 if (age.value == '') {
                alert('나이를 입력하세요')
                age.focus()
                isValid= false;   
            }

                if(isValid){
                    //, 유효성 검사가 모두 끝나고 isValid가 참일때만 form 제출
                    const hobbArr = []     
                    hobbies.forEach(ele => {
                    // console.log(ele.value)
                    hobbArr.push(ele.value)
                    console.log(hobbArr)})
                    alert(`${name.value}님(${age.value}) 선택한 취미는 ${hobbArr.join(',')} 입니다.`)
                    alert('입력 데이터 저장완료!!')
                    // 직접 submit동작 메소드
                    document.forms[0].submit();
            }
------
-regex - 정규식   (w3schools에서 확인 가능)
정규식을 이용하여 /[]/ 기호 안에 원하는 패턴 작성 []안에는 사용가능한 문자를 나열. 1번이상 반복가능한 패턴기호는 +(중복입력가능)
let regex= /[a-zA-Z가-힣]+/
let regex= /^[a-zA-Z가-힣]$/    -> ^$는 원래 사용해야하나 생략가능

-이름에 대한 유효성 검사: 영문자 또는 한글만 가능 ->정규식 패턴을 이용
위에서 정의한 regex로 입력값 검사
regex.test(name.value) -> 홍길동 true,  홍길동12 false

if(regex.test(name.value))   참일경우
if(!regex.test(name.value))  거짓일경우

-? -> ()로 묶여있는 부분 사용 한번 또는 사용 안함
- + 한번이상 사용 가능 
ㄴ + 기호 대신 {} 안에 문자의 개수를 범위로 지정 {2,5} ->2~5개 / {3} -> 3개 / {2, } 2개 이상 / { , 5} 5개 이하
-* 0개 이상




핸드폰 번호 정규식

var regPhone = /^01([0|1|6|7|8|9])-?([0-9]{3,4})-?([0-9]{4})$/
뜻 풀이

01로 시작하고 (0,1,6,7,8,9 중 하나의 문자) -은 있을수도 없을수도 (숫자만 들어가면서 3~4 길이의 문자) - 은 있을수도 없을수도 (숫자만 들어가면서 4 길이의 문자) 

이메일 정규식

var regEmail = /^[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_\.]?[0-9a-zA-Z])*\.[a-zA-Z]{2,3}$/
뜻 풀이

숫자나 영어로 시작하고 - _ .을 포함한 숫자나 영어만 있고 @가 들어간다 숫자나 영어로 다시 시작하고 - _ . 을 포함한 영어나 숫자만 있고 .이 들어간다 그리고 2개 또는 3개의 글자인 영어로 끝난다
---------------


    <h3>자바스크립트의 오브젝트</h3>    
    <ul>
자바스크립트의 객체를 정의하기: 기호 {}</li>
 자바에서는 객체의 구성요소 - 속성과 메소드 -> 미리 클래스로 정의</li>
자바스크립트는 구성요소를 미리 정의하지않는 프로토타입 기반 객체</li>
→ 구성요소인 속성과 메소드의 추가가 가능</li>


            //객체 리터럴을 const 변수 sana에 대입 - 객체이름:sana
            // key: value ->map과 유사
            const sana = {name:'사나', age:23, address:'경기'}

            //객체의 메소드는 함수 리터럴(문자)로 정의
            sana.hello = function(){
                alert(`안녕하세요. 나는 ${this.name}입니다.`)
            }

-this 사용 가능 (애로우function에서는 불가능 -> 익명객체 형태이기에 .. this는 정의되어있는 것이기에 ->메소드 정의할때는 function으로 적자...)



-배열
//구성요소가 없는 객체리터럴 선언
            const momo= {}
            momo.color = 'red';

            // 배열값이 없는 빈 배열 선언
            const arr=[];
            // 배열값 형식이 달라도 저장할 수 있음
            const arrr=['a',123,new Date()];
            
            // 객체의 구성요소가 다르지만 같은 배열에 저장 가능
            const objarr = [momo, sana];
            console.log(objarr);

---
prompt - 입력창

-----------
중요!!!!!!!!!!!!!!!!!

공공데이터 rest api에서 받는 데이터 형식 중 하나가 자바스크립트 객체와 변환되는 json이라는 문자열(*****)

https://www.data.go.kr/
https://developers.kakao.com/
 
talend api 


KakaoAK 11630b5c237e76994876b14e394d3190
->한칸띄고 내 key값 넣기


비동기통신방법으로 자바스크립트에서 사용
