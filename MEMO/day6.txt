day6

-객체의 배열
-배열의 정렬: times.sort(); 
-문자열 정렬은 사전순 (a-z, 가- 힣, 0 - 9)
-객체의 정렬은 기준 속성을 무엇으로 할 것인지 직접 함수로 구현 -sort 메소드 안에 콜백 함수 사용***
        
-js 에서는 문자열도 크다, 작다 기호로 비교 가능
schedules.sort(function(a,b){
            //비교되는 2개의 a 객체와 b 객체

            //비교 속성에 대한 조건식
            //시간 순서로 정렬시
            //if(a.time < b.time)

            //할일 순서로 정렬시
            if(a.todo < b.todo) //
                return-1
            else  return 1 })


-콜백함수 예제 정리
1) 배열.forEach(함수) : 배열의 요소를 하나씩 가져와서 '함수'를 실행시킴
2) 배열.sort(함수) : 배열을 정렬할때 정렬 기준과 방법에 동작을 '함수'로 작성
3) 요소.addEventListener('click', 함수): 요소가 클릭 이벤트가 생기는지 리슨하고, 이벤트 발생시 '함수'실행
 addEventListener: 이벤트 핸들러 메소드
4) setInterval(시간, 함수): 정해진 시간마다 함수 실행(여러번 실행)
   setTimeout(시간, 함수) : 정해진 시간이 지나면 함수 실행(1번 실행)


--
-이벤트 처리방법 1
    <button id="hello" onclick="hello()">Hello</button>

function hello(){
 alert("hello")
 console.log('클릭 이벤트에 대한 함수입니다 button 태그에 hello() 함수 호출 명령이 있습니다.')}


-이벤트 처리방법 2 / 서로의 영역을 침범하지 않고 처리 가능
    <button id="hi">하이</button>
    <pre style="font-size: 1rem; font-family: inherit;">

document.getElementById('hi').addEventListener('click',
 function(){
  alert('하이')
  console.log('button 태그에 자바스크립트 코드를 작성하지 않고 이벤트 처리합니다')})


2-1 addEventListener의 종류
//change: 요소의 값이 변경될 때 발생하는 이벤트 , input에서는 내용이 바뀌는 이벤트
            //click: 마우스 input을 클릭시 발생하는 이벤트
            document.getElementById('message').addEventListener('change',()=>{
                const msg = document.getElementById('message')
                console.log(msg.value)
            })

keyup->눌렀다 뗄때(aaaaaaa ....), keydown->입력(누를떄 - a) -> 비슷함
            document.getElementById('message').addEventListener('keyup',()=>{
                const msg = document.getElementById('message')
                console.log(msg.value)
            })

--------------------------
css

box-shadow: inset -25px -25px 40px rgba(0,0,0,0.5);   -> 그림자
border-radius: 50%;   ->원모양 





--
-이벤트 타겟 , 큰 범위로 작은 내용들까지 감쌈
span 클릭하면 alert을 띄우고 싶음
        1) span에 이벤트 주기 - click 이벤트 핸들러 작성 ->단 span 5개에 모두 동일한 작업 필요
        2) div에 이벤트 주기(dom구조인 html은 이벤트를 상속함) -->

-콜백 함수의 인자 e는 이벤트를 발생시킨 정보를 포함
document.getElementById('container').addEventListener('click',function(e){
    console.log(e)
    console.log('e.target.tagName=', e.target.tagName)
    if(e.target.tagName==='SPAN'){
    //alert(`선택한 공은 ${e.target.outerText}입니다.`)
    alert(`선택한 공은 ${e.target.innerHTML}입니다.`)}})









--- 
-Date
현재날짜와 시간
 document.writeln(new Date())

-Locale: 국가 혹은 언어와 관련된 정보(en-US, ko-KR..)
 운영체제에 설정한 현지시간을 현지 형식에 맞게 출력 (03/10/2025 ... )
document.writeln('toLocaleString = ',new Date().toLocaleString());

document.writeln('toLocaleDateString en = ',new Date().toLocaleDateString('en-US',{
                year:'numeric',month:"2-digit", day:"2-digit"}));

document.writeln('toLocaleDateString kr = ',new Date().toLocaleDateString('kr-KR',{
            year:'numeric',month:"2-digit", day:"2-digit"}));   

document.writeln('toLocaleDateString zn-CN = ',new Date().toLocaleDateString('zn-CN',{
            year:'numeric',month:"2-digit", day:"2-digit"}));   

-표준시간 출력
document.writeln('toUTCString(협정 세계시)= ',new Date().toUTCString());
document.writeln('toISOString(국제 표준형식)= ',new Date().toISOString());


-날짜 및 시간 GET 메소드</h4>');
document.writeln('년도 = ',new Date().getFullYear());
document.writeln('월 = ',new Date().getMonth()+1); //월이 0부터 시작함
document.writeln('일 = ',new Date().getDate());
document.writeln('요일 = ',new Date().getDay());//요일 0~6. 0=일요일
document.writeln('시 = ',new Date().getHours());
document.writeln('분 = ',new Date().getSeconds());
document.writeln('초 = ',new Date().getMilliseconds());


-날짜 및 시간 SET 메소드
setXXX메소드로 today에 저장된 날짜 변경 가능

let today=new Date();

today.setFullYear(today.getFullYear()+3)
document.writeln('today.getFullYear()+3 = ', today);
today.setMonth(today.getMonth()+4)
document.writeln('today.getMonth()+4 = ', today);
today.setDate(today.getDate()+10)
document.writeln('today.getDate()+10 = ', today);

-원하는 날짜로 설정
let mybirth = new Date('2020-11-03')

------------

<input type="checkbox" name="hobby" id="football" value="축구">  ->값을 가져오려면 value
                    <label for="football">축구</label>                         ->축구는 innerhtml





-달력 만들기
-1) 18,19번은 입력요소 가져올 때 querySelector 사용 -> 선택자 연습 예제
-2) form은 document의 하위 객체. 여러 form을 가질 수 있으므로 배열 forms 이용하여 입력 요소 값을 가져올 수 있음
        const night = document.forms[0].days    //name 속성값사용


-날짜를 전달하면 yyyy-mm-dd 패턴의 문자열로 리턴해주는 함수
        function Dateformat(vdate){ //vdate->날짜타입 인자
            const year = vdate.getFullYear();
            const month = (vdate.getMonth()+1).toString().padStart(2,'0');   //month는 int, 문자열 수정은 String 일때 가능
                                                                            //padStart ->무조건 2자리로. 없으면 0을 채워서
            const date = vdate.getDate().toString().padStart(2,'0');

            console.log([year,month,date].join('-')) //[] 배열 값을 기호 -로 연결
        }

        Dateformat(new Date())


-이벤트 리스너(핸들러)
        document.getElementById('night').addEventListener('change',function(){
            console.log('선택 숙박일수 =',night.value);
        })





콜백함수 이름을 인자로 전달시에는 ()안씀 - 호출임


           

1)숙박일수 선택시
        document.getElementById('night').addEventListener('change', changeEndDate)

2) 입실날짜 선택시 
        document.getElementById('enterDate').addEventListener('change', changeEndDate)


        function changeEndDate() {
            console.log('선택 숙박일 =', night.value)
                let end_date = new Date(start.value)
                end_date.setDate(end_date.getDate()+Number(night.value))
                //퇴실날짜 input은 전역변수 end로 선언
                end.value = dateFormat(end_date)
        }

-입실날짜 요소의 min,max 속성으로 값의 제한을 설정
-요구사항 min: 오늘날짜 / max : 3개월

function initStart(){
  let today = new Date();
  start.value = dateFormat(today);

-오늘날짜 이전 선택 불가
  start.min = start.value;

-3달 이후까지만 선택 가능
  today.setMonth(today.getMonth()+3)
  start.max = dateFormat(today)
        }












